Primeiro cria-se uma classe Vendas:
namespace Models
{
    public class Venda
    {
        public Venda(int id, string produto, decimal preço, DateTime dataVenda)
        {
            Id = id;
            Produto = produto;
            Preço = preço;
            DataVenda = dataVenda;
        }
        public int Id { get; set; }
        public string Produto { get; set; }
        public decimal Preço { get; set; }
        public DateTime DataVenda { get; set; }
    }
}

DEPOIS: Intancia no programa

DateTime dataAtual = DateTime.Now;

List<Venda> listaVendas = new List<Venda>();

Venda v1 = new Venda(1, "MaterialDeEscritorio", 25.00M, dataAtual);
Venda v2 = new Venda(2, "LicençaDeSoftware", 110.00M, dataAtual);

listaVendas.Add(v1);
listaVendas.Add(v2);

string serializado = JsonConvert.SerializeObject(listaVendas, Formatting.Indented);

File.WriteAllText("Arquivos/vendas.json", serializado);

Console.WriteLine(serializado);

PARA DESERIALIZAÇÃO:

CRIA-SE UMA CLASSE:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace ExemploExplorando.Models
{
    public class Venda
    {
        public int Id { get; set; }

        //quando o cliente usar um nome diferente do parametro, para não quebrar regras de convenção você pode usar:
        [JsonProperty("Nome_Produto")]
        public string Produto { get; set; }
        public decimal Preço { get; set; }
        public DateTime DataVenda { get; set; }
    }
}

DEPOIS: No programa

sing ExemploExplorando.Models;
using System.Globalization;
using Newtonsoft.Json;

//Leitura do arquivo
string conteudoArquivo = File.ReadAllText("Arquivos/vendas.json");

List<Venda> listaVenda = JsonConvert.DeserializeObject<List<Venda>>(conteudoArquivo);

foreach (Venda venda in listaVenda)
{
    Console.WriteLine($"Id: {venda.Id}, Produto: {venda.Produto}" + $"Preço: {venda.Preço}, Data: {venda.DataVenda.ToString("dd/MM/yyy HH:mm")}");
}


